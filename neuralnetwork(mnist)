from keras.datasets import mnist
import numpy as np
from PIL import Image
from PIL import Image, ImageDraw
from math import sqrt
def b(R,G,B):
    res = 0
    b = (R + G + B)//3
    if b > 127:
        res = 1
    else:
        res = 0
    return res
#img = 'C:\Projects\Boris\one.jpg'
def b1(R,G,B,x):
    res = 0
    b = (R + G + B)//3
    if b > x:
        res = 0
    else:
        res = 1
    return res
def con(img):
    imag = Image.open(open(img, 'rb'))
    #Convert the image te RGB if it is a .gif for example
    imag = imag.convert ('RGB')    
    signal_array = []
    for i in range(28):
        for j in range(28):
            X,Y = j,i
            pixelRGB = imag.getpixel((X,Y))
            R,G,B = pixelRGB       
            signal_array.append(b(R,G,B))
    return signal_array
def tr(x):
    a = [0,0,0,0,0,0,0,0,0,0]
    a[x] = 1
    return a
def out(arr):
    out = -1
    for i in range(len(arr)):
        if arr[i] >= 0.6:
            out = i
            break
    return out
def conn(arr):
    signal_array = []
    for i in range(784):
        if arr[i] > 55:
            signal_array.append(1)
        else:
            signal_array.append(0)
    return signal_array
def sigmoid(x):
    return 1/(1+np.exp(-x))
def neuron(signal,weights):
    signal = sigmoid(np.dot(signal,weights))
    return signal
    
def net(s,w):
    signals1 = []
    signals2 = []
    for i in range(10):
        signals1.append(neuron(s,w[i]))
    return signals1
w = [[],[],[],[],[],[],[],[],[],[]]

for i in range(10):
    for j in range(784):
        w[i].append(0)
(train_X, train_y), (test_X, test_y) = mnist.load_data()

err = [0,0,0,0,0,0,0,0,0,0]


(train_X, train_y), (test_X, test_y) = mnist.load_data()
w = np.load('C:\\Projects\\Boris\w7.npy')
count = 0
inputt = con('C:\\Projects\\Boris\o.jpg')
res = net(inputt,w)
print(out(res))
print(res)
